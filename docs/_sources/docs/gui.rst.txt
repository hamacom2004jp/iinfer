.. -*- coding: utf-8 -*-

****************
GUIモード
****************

- iinferのGUIモードを使用することで、AIモデルを簡単に実行することが出来ます。
- iinferのコマンドを、後で簡単に実行できるように、登録しておくことが出来ます。
- 登録しおいたコマンドは、一連の処理をパイプライン処理として登録することが出来ます。
- GUIモードは `iinfer -m gui -c start` コマンドで起動出来ます。

GUIモードのチュートリアル
=========================

メイン画面
----------

1. 起動直後の画面です。
2. **Commands** では、iinferのコマンドを任意のオプションで登録できます。
3. **Pipeline** では、 **Commands** で設定したコマンドを、順に実行させるような登録が出来ます。

.. image:: ../static/ss/00100_main.jpg

コマンド画面
--------------
1. **Commands** の **[ + ]** ボタンを押すと、新しいコマンドを設定する画面を表示します。
2. **title** には、コマンドのタイトルを設定します。このタイトルは、登録したコマンドを一意に識別するのに使用します。

.. image:: ../static/ss/00200_cmd.jpg

1. **mode** には、iinferオプションのモードを設定します。

.. image:: ../static/ss/00210_cmd_deploy.jpg

1. **command** には、iinferオプションのコマンドを設定します。
2. ここでは、AIモデルのデプロイを行う **deploy** コマンドを設定しています。

.. image:: ../static/ss/00211_cmd_deploy.jpg

1. **command** を選択すると、使用可能なオプションの入力フォームが表示されます。
2. 各オプションの説明は、 `コマンドリファレンス <https://hamacom2004jp.github.io/iinfer/docs/command.html>`_ を参照してください。
3. **[ + ]** ボタンを押すと、オプションの入力フォームを追加できます。
4. **file** ボタンを押すと、ファイル選択ダイアログが表示され、ファイルを選択できます。
5. **ごみばこ** ボタンを押すと、オプションの入力フォームを削除できます。
6. **[ advanced options ]** を押すと、非表示にしているオプションの入力フォームを表示します。
7. **Raw** ボタンを押すと、入力したオプションを、コマンドラインオプションの表記でどうなるか確認できます。
8. **Save** ボタンを押すと、コマンドを登録します。
9. **Execute** ボタンを押すと、コマンドを実行します。

.. image:: ../static/ss/00212_cmd_deploy.jpg

1. コマンド実行した結果です。
2. **deploy** コマンドを実行したので、処理が成功したことが表示されました。

.. image:: ../static/ss/00214_cmd_deploy.jpg

1. 登録されているAIモデル一覧を表示する **deploy_list** コマンドを登録して実行します。

.. image:: ../static/ss/00220_cmd_deploy_list.jpg

1. 登録したAIモデルが表示されました。

.. image:: ../static/ss/00221_cmd_deploy_list.jpg

1. 登録したAIモデルのセッションを開始する **start** コマンドを登録して実行します。

.. image:: ../static/ss/00230_cmd_start.jpg

1. AIモデルのセッションが開始できました。

.. image:: ../static/ss/00231_cmd_start.jpg

1. セッションを使用して、推論を実行する **predict** コマンドを登録して実行します。

.. image:: ../static/ss/00240_cmd_predict.jpg

1. 推論が成功すると、推論結果が表示されます。
2. サムネイルをクリックすると、拡大表示します。
 
.. image:: ../static/ss/00241_cmd_predict.jpg

1. 可視化画像を生成するオプションが有効な場合、このように推論結果が可視化されます。

.. image:: ../static/ss/00242_cmd_predict.jpg

1. 可視化画像のオプションは **nodraw** が **False** の場合に有効です。
2. ここでは、後処理の設定のために、 **nodraw** を **True** にしました。

.. image:: ../static/ss/00243_cmd_predict.jpg

1. 後処理の **det_filter** コマンドを登録して実行します。
2. ここでは、クラススコアが **0.9** 以上の **dog** のみを検出するように設定しました。

.. image:: ../static/ss/00250_cmd_det_filter.jpg

1. 後処理が成功すると、結果が表示されます。
2. サムネイルをクリックすると、拡大表示します。

.. image:: ../static/ss/00251_cmd_det_filter.jpg

1. **dog** だけが検出されていることが確認できます。

.. image:: ../static/ss/00252_cmd_det_filter.jpg

1. 一旦セッションを終了する **stop** コマンドを登録して実行します。

.. image:: ../static/ss/00260_cmd_stop.jpg

パイプライン画面
-----------------

1. **Pipeline** の **[ + ]** ボタンを押すと、新しいパイプラインを設定する画面を表示します。
2. **title** には、パイプラインのタイトルを設定します。このタイトルは、登録したパイプラインを一意に識別するのに使用します。
3. **descliption** には、パイプラインの説明を設定します。

.. image:: ../static/ss/00300_pipe.jpg

1. 最初に実行するコマンドを選択します。
2. ここでは、 **predict_mmdet** コマンドを選択しました。
3. 続けて **[ + ]** ボタンを押すと、次に実行するコマンドを選択できます。

.. image:: ../static/ss/00310_pipe.jpg

1. 推論してから後処理するパイプラインを設定しました。

.. image:: ../static/ss/00311_pipe.jpg

1. **Raw** でどんなコマンドになるか確認してみます。
2. パイプラインは、各コマンドの標準入出力をパイプ「|」でつないでいくことで構成しています。
3. warn(警告)表示されているのは、前のコマンドの入力を受け付けるオプションが設定されていないためです。
4. 無視しても実行できますが、正しいパイプラインを構成するためには、適切なオプションを設定してください。

.. image:: ../static/ss/00312_pipe.jpg

1. **Execute** で実行してみます。
2. パイプラインで実行した結果が表示されます。

.. image:: ../static/ss/00313_pipe.jpg

